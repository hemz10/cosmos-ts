"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryFlatFeeResponse = exports.QueryFlatFeeRequest = exports.QueryOutstandingRewardsResponse = exports.QueryOutstandingRewardsRequest = exports.QueryRewardsRecordsResponse = exports.QueryRewardsRecordsRequest = exports.BlockTracking = exports.QueryEstimateTxFeesResponse = exports.QueryEstimateTxFeesRequest = exports.QueryRewardsPoolResponse = exports.QueryRewardsPoolRequest = exports.QueryBlockRewardsTrackingResponse = exports.QueryBlockRewardsTrackingRequest = exports.QueryContractMetadataResponse = exports.QueryContractMetadataRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = void 0;
/* eslint-disable */
const pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
const rewards_1 = require("./rewards");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const helpers_1 = require("../../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: undefined
    };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            rewards_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = rewards_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? rewards_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? rewards_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? rewards_1.Params.fromPartial(object.params) : undefined;
        return message;
    }
};
function createBaseQueryContractMetadataRequest() {
    return {
        contractAddress: ""
    };
}
exports.QueryContractMetadataRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractMetadataRequest();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseQueryContractMetadataResponse() {
    return {
        metadata: undefined
    };
}
exports.QueryContractMetadataResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metadata !== undefined) {
            rewards_1.ContractMetadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metadata = rewards_1.ContractMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: (0, helpers_1.isSet)(object.metadata) ? rewards_1.ContractMetadata.fromJSON(object.metadata) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.metadata !== undefined && (obj.metadata = message.metadata ? rewards_1.ContractMetadata.toJSON(message.metadata) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryContractMetadataResponse();
        message.metadata = object.metadata !== undefined && object.metadata !== null ? rewards_1.ContractMetadata.fromPartial(object.metadata) : undefined;
        return message;
    }
};
function createBaseQueryBlockRewardsTrackingRequest() {
    return {};
}
exports.QueryBlockRewardsTrackingRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBlockRewardsTrackingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryBlockRewardsTrackingRequest();
        return message;
    }
};
function createBaseQueryBlockRewardsTrackingResponse() {
    return {
        block: undefined
    };
}
exports.QueryBlockRewardsTrackingResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.block !== undefined) {
            exports.BlockTracking.encode(message.block, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBlockRewardsTrackingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.block = exports.BlockTracking.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            block: (0, helpers_1.isSet)(object.block) ? exports.BlockTracking.fromJSON(object.block) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.block !== undefined && (obj.block = message.block ? exports.BlockTracking.toJSON(message.block) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryBlockRewardsTrackingResponse();
        message.block = object.block !== undefined && object.block !== null ? exports.BlockTracking.fromPartial(object.block) : undefined;
        return message;
    }
};
function createBaseQueryRewardsPoolRequest() {
    return {};
}
exports.QueryRewardsPoolRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardsPoolRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryRewardsPoolRequest();
        return message;
    }
};
function createBaseQueryRewardsPoolResponse() {
    return {
        undistributedFunds: [],
        treasuryFunds: []
    };
}
exports.QueryRewardsPoolResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.undistributedFunds) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.treasuryFunds) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardsPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.undistributedFunds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.treasuryFunds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            undistributedFunds: Array.isArray(object === null || object === void 0 ? void 0 : object.undistributedFunds) ? object.undistributedFunds.map((e) => coin_1.Coin.fromJSON(e)) : [],
            treasuryFunds: Array.isArray(object === null || object === void 0 ? void 0 : object.treasuryFunds) ? object.treasuryFunds.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.undistributedFunds) {
            obj.undistributedFunds = message.undistributedFunds.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.undistributedFunds = [];
        }
        if (message.treasuryFunds) {
            obj.treasuryFunds = message.treasuryFunds.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.treasuryFunds = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryRewardsPoolResponse();
        message.undistributedFunds = ((_a = object.undistributedFunds) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromPartial(e))) || [];
        message.treasuryFunds = ((_b = object.treasuryFunds) === null || _b === void 0 ? void 0 : _b.map(e => coin_1.Coin.fromPartial(e))) || [];
        return message;
    }
};
function createBaseQueryEstimateTxFeesRequest() {
    return {
        gasLimit: helpers_1.Long.UZERO,
        contractAddress: ""
    };
}
exports.QueryEstimateTxFeesRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.gasLimit.isZero()) {
            writer.uint32(8).uint64(message.gasLimit);
        }
        if (message.contractAddress !== "") {
            writer.uint32(18).string(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEstimateTxFeesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.gasLimit = reader.uint64();
                    break;
                case 2:
                    message.contractAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            gasLimit: (0, helpers_1.isSet)(object.gasLimit) ? helpers_1.Long.fromValue(object.gasLimit) : helpers_1.Long.UZERO,
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.gasLimit !== undefined && (obj.gasLimit = (message.gasLimit || helpers_1.Long.UZERO).toString());
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryEstimateTxFeesRequest();
        message.gasLimit = object.gasLimit !== undefined && object.gasLimit !== null ? helpers_1.Long.fromValue(object.gasLimit) : helpers_1.Long.UZERO;
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseQueryEstimateTxFeesResponse() {
    return {
        gasUnitPrice: undefined,
        estimatedFee: []
    };
}
exports.QueryEstimateTxFeesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.gasUnitPrice !== undefined) {
            coin_1.DecCoin.encode(message.gasUnitPrice, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.estimatedFee) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEstimateTxFeesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.gasUnitPrice = coin_1.DecCoin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.estimatedFee.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            gasUnitPrice: (0, helpers_1.isSet)(object.gasUnitPrice) ? coin_1.DecCoin.fromJSON(object.gasUnitPrice) : undefined,
            estimatedFee: Array.isArray(object === null || object === void 0 ? void 0 : object.estimatedFee) ? object.estimatedFee.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.gasUnitPrice !== undefined && (obj.gasUnitPrice = message.gasUnitPrice ? coin_1.DecCoin.toJSON(message.gasUnitPrice) : undefined);
        if (message.estimatedFee) {
            obj.estimatedFee = message.estimatedFee.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.estimatedFee = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryEstimateTxFeesResponse();
        message.gasUnitPrice = object.gasUnitPrice !== undefined && object.gasUnitPrice !== null ? coin_1.DecCoin.fromPartial(object.gasUnitPrice) : undefined;
        message.estimatedFee = ((_a = object.estimatedFee) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromPartial(e))) || [];
        return message;
    }
};
function createBaseBlockTracking() {
    return {
        inflationRewards: undefined,
        txRewards: []
    };
}
exports.BlockTracking = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.inflationRewards !== undefined) {
            rewards_1.BlockRewards.encode(message.inflationRewards, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.txRewards) {
            rewards_1.TxRewards.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockTracking();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.inflationRewards = rewards_1.BlockRewards.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.txRewards.push(rewards_1.TxRewards.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            inflationRewards: (0, helpers_1.isSet)(object.inflationRewards) ? rewards_1.BlockRewards.fromJSON(object.inflationRewards) : undefined,
            txRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.txRewards) ? object.txRewards.map((e) => rewards_1.TxRewards.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.inflationRewards !== undefined && (obj.inflationRewards = message.inflationRewards ? rewards_1.BlockRewards.toJSON(message.inflationRewards) : undefined);
        if (message.txRewards) {
            obj.txRewards = message.txRewards.map(e => e ? rewards_1.TxRewards.toJSON(e) : undefined);
        }
        else {
            obj.txRewards = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockTracking();
        message.inflationRewards = object.inflationRewards !== undefined && object.inflationRewards !== null ? rewards_1.BlockRewards.fromPartial(object.inflationRewards) : undefined;
        message.txRewards = ((_a = object.txRewards) === null || _a === void 0 ? void 0 : _a.map(e => rewards_1.TxRewards.fromPartial(e))) || [];
        return message;
    }
};
function createBaseQueryRewardsRecordsRequest() {
    return {
        rewardsAddress: "",
        pagination: undefined
    };
}
exports.QueryRewardsRecordsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.rewardsAddress !== "") {
            writer.uint32(10).string(message.rewardsAddress);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardsRecordsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardsAddress = reader.string();
                    break;
                case 2:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardsAddress: (0, helpers_1.isSet)(object.rewardsAddress) ? String(object.rewardsAddress) : "",
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.rewardsAddress !== undefined && (obj.rewardsAddress = message.rewardsAddress);
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryRewardsRecordsRequest();
        message.rewardsAddress = (_a = object.rewardsAddress) !== null && _a !== void 0 ? _a : "";
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    }
};
function createBaseQueryRewardsRecordsResponse() {
    return {
        records: [],
        pagination: undefined
    };
}
exports.QueryRewardsRecordsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.records) {
            rewards_1.RewardsRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardsRecordsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.records.push(rewards_1.RewardsRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            records: Array.isArray(object === null || object === void 0 ? void 0 : object.records) ? object.records.map((e) => rewards_1.RewardsRecord.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.records) {
            obj.records = message.records.map(e => e ? rewards_1.RewardsRecord.toJSON(e) : undefined);
        }
        else {
            obj.records = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryRewardsRecordsResponse();
        message.records = ((_a = object.records) === null || _a === void 0 ? void 0 : _a.map(e => rewards_1.RewardsRecord.fromPartial(e))) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    }
};
function createBaseQueryOutstandingRewardsRequest() {
    return {
        rewardsAddress: ""
    };
}
exports.QueryOutstandingRewardsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.rewardsAddress !== "") {
            writer.uint32(10).string(message.rewardsAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutstandingRewardsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardsAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardsAddress: (0, helpers_1.isSet)(object.rewardsAddress) ? String(object.rewardsAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.rewardsAddress !== undefined && (obj.rewardsAddress = message.rewardsAddress);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryOutstandingRewardsRequest();
        message.rewardsAddress = (_a = object.rewardsAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseQueryOutstandingRewardsResponse() {
    return {
        totalRewards: [],
        recordsNum: helpers_1.Long.UZERO
    };
}
exports.QueryOutstandingRewardsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.totalRewards) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (!message.recordsNum.isZero()) {
            writer.uint32(16).uint64(message.recordsNum);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutstandingRewardsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.totalRewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.recordsNum = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.totalRewards) ? object.totalRewards.map((e) => coin_1.Coin.fromJSON(e)) : [],
            recordsNum: (0, helpers_1.isSet)(object.recordsNum) ? helpers_1.Long.fromValue(object.recordsNum) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalRewards) {
            obj.totalRewards = message.totalRewards.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.totalRewards = [];
        }
        message.recordsNum !== undefined && (obj.recordsNum = (message.recordsNum || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryOutstandingRewardsResponse();
        message.totalRewards = ((_a = object.totalRewards) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromPartial(e))) || [];
        message.recordsNum = object.recordsNum !== undefined && object.recordsNum !== null ? helpers_1.Long.fromValue(object.recordsNum) : helpers_1.Long.UZERO;
        return message;
    }
};
function createBaseQueryFlatFeeRequest() {
    return {
        contractAddress: ""
    };
}
exports.QueryFlatFeeRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFlatFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFlatFeeRequest();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseQueryFlatFeeResponse() {
    return {
        flatFeeAmount: undefined
    };
}
exports.QueryFlatFeeResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.flatFeeAmount !== undefined) {
            coin_1.Coin.encode(message.flatFeeAmount, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFlatFeeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.flatFeeAmount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            flatFeeAmount: (0, helpers_1.isSet)(object.flatFeeAmount) ? coin_1.Coin.fromJSON(object.flatFeeAmount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.flatFeeAmount !== undefined && (obj.flatFeeAmount = message.flatFeeAmount ? coin_1.Coin.toJSON(message.flatFeeAmount) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryFlatFeeResponse();
        message.flatFeeAmount = object.flatFeeAmount !== undefined && object.flatFeeAmount !== null ? coin_1.Coin.fromPartial(object.flatFeeAmount) : undefined;
        return message;
    }
};
//# sourceMappingURL=query.js.map