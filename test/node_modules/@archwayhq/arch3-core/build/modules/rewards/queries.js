"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupRewardsExtension = void 0;
const arch3_proto_1 = require("@archwayhq/arch3-proto");
const stargate_1 = require("@cosmjs/stargate");
const long_1 = __importDefault(require("long"));
/**
 * Creates a rewards extension for the given {@link QueryClient}.
 *
 * @param base - The base query client to use for RPC queries.
 * @returns A {@link RewardsExtension}.
 */
function setupRewardsExtension(base) {
    const queryService = arch3_proto_1.archway.rewards.v1.createRpcQueryExtension(base);
    return {
        rewards: {
            params: async () => queryService.params(),
            contractMetadata: (contractAddress) => queryService.contractMetadata({ contractAddress }),
            blockRewardsTracking: () => queryService.blockRewardsTracking(),
            rewardsPool: () => queryService.rewardsPool(),
            estimateTxFees: (gasLimit, contractAddress) => queryService.estimateTxFees({
                gasLimit: long_1.default.fromNumber(gasLimit),
                contractAddress,
            }),
            rewardsRecords: (rewardsAddress, paginationKey) => queryService.rewardsRecords({
                rewardsAddress,
                pagination: (0, stargate_1.createPagination)(paginationKey),
            }),
            outstandingRewards: (rewardsAddress) => queryService.outstandingRewards({ rewardsAddress }),
            flatFee: (contractAddress) => queryService.flatFee({ contractAddress }),
        }
    };
}
exports.setupRewardsExtension = setupRewardsExtension;
//# sourceMappingURL=queries.js.map