"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxTracking = exports.BlockTracking = exports.ContractOperationInfo = exports.TxInfo = exports.contractOperationToJSON = exports.contractOperationFromJSON = exports.ContractOperation = void 0;
/* eslint-disable */
const helpers_1 = require("../../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
/** ContractOperation denotes which operation consumed gas. */
var ContractOperation;
(function (ContractOperation) {
    /** CONTRACT_OPERATION_UNSPECIFIED - Invalid or unknown operation */
    ContractOperation[ContractOperation["CONTRACT_OPERATION_UNSPECIFIED"] = 0] = "CONTRACT_OPERATION_UNSPECIFIED";
    /** CONTRACT_OPERATION_INSTANTIATION - Instantiate operation */
    ContractOperation[ContractOperation["CONTRACT_OPERATION_INSTANTIATION"] = 1] = "CONTRACT_OPERATION_INSTANTIATION";
    /** CONTRACT_OPERATION_EXECUTION - Execute operation */
    ContractOperation[ContractOperation["CONTRACT_OPERATION_EXECUTION"] = 2] = "CONTRACT_OPERATION_EXECUTION";
    /** CONTRACT_OPERATION_QUERY - Query */
    ContractOperation[ContractOperation["CONTRACT_OPERATION_QUERY"] = 3] = "CONTRACT_OPERATION_QUERY";
    /** CONTRACT_OPERATION_MIGRATE - Migrate operation */
    ContractOperation[ContractOperation["CONTRACT_OPERATION_MIGRATE"] = 4] = "CONTRACT_OPERATION_MIGRATE";
    /** CONTRACT_OPERATION_IBC - IBC operations */
    ContractOperation[ContractOperation["CONTRACT_OPERATION_IBC"] = 5] = "CONTRACT_OPERATION_IBC";
    /** CONTRACT_OPERATION_SUDO - Sudo operation */
    ContractOperation[ContractOperation["CONTRACT_OPERATION_SUDO"] = 6] = "CONTRACT_OPERATION_SUDO";
    /** CONTRACT_OPERATION_REPLY - Reply callback operation */
    ContractOperation[ContractOperation["CONTRACT_OPERATION_REPLY"] = 7] = "CONTRACT_OPERATION_REPLY";
    ContractOperation[ContractOperation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ContractOperation = exports.ContractOperation || (exports.ContractOperation = {}));
function contractOperationFromJSON(object) {
    switch (object) {
        case 0:
        case "CONTRACT_OPERATION_UNSPECIFIED":
            return ContractOperation.CONTRACT_OPERATION_UNSPECIFIED;
        case 1:
        case "CONTRACT_OPERATION_INSTANTIATION":
            return ContractOperation.CONTRACT_OPERATION_INSTANTIATION;
        case 2:
        case "CONTRACT_OPERATION_EXECUTION":
            return ContractOperation.CONTRACT_OPERATION_EXECUTION;
        case 3:
        case "CONTRACT_OPERATION_QUERY":
            return ContractOperation.CONTRACT_OPERATION_QUERY;
        case 4:
        case "CONTRACT_OPERATION_MIGRATE":
            return ContractOperation.CONTRACT_OPERATION_MIGRATE;
        case 5:
        case "CONTRACT_OPERATION_IBC":
            return ContractOperation.CONTRACT_OPERATION_IBC;
        case 6:
        case "CONTRACT_OPERATION_SUDO":
            return ContractOperation.CONTRACT_OPERATION_SUDO;
        case 7:
        case "CONTRACT_OPERATION_REPLY":
            return ContractOperation.CONTRACT_OPERATION_REPLY;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ContractOperation.UNRECOGNIZED;
    }
}
exports.contractOperationFromJSON = contractOperationFromJSON;
function contractOperationToJSON(object) {
    switch (object) {
        case ContractOperation.CONTRACT_OPERATION_UNSPECIFIED:
            return "CONTRACT_OPERATION_UNSPECIFIED";
        case ContractOperation.CONTRACT_OPERATION_INSTANTIATION:
            return "CONTRACT_OPERATION_INSTANTIATION";
        case ContractOperation.CONTRACT_OPERATION_EXECUTION:
            return "CONTRACT_OPERATION_EXECUTION";
        case ContractOperation.CONTRACT_OPERATION_QUERY:
            return "CONTRACT_OPERATION_QUERY";
        case ContractOperation.CONTRACT_OPERATION_MIGRATE:
            return "CONTRACT_OPERATION_MIGRATE";
        case ContractOperation.CONTRACT_OPERATION_IBC:
            return "CONTRACT_OPERATION_IBC";
        case ContractOperation.CONTRACT_OPERATION_SUDO:
            return "CONTRACT_OPERATION_SUDO";
        case ContractOperation.CONTRACT_OPERATION_REPLY:
            return "CONTRACT_OPERATION_REPLY";
        case ContractOperation.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.contractOperationToJSON = contractOperationToJSON;
function createBaseTxInfo() {
    return {
        id: helpers_1.Long.UZERO,
        height: helpers_1.Long.ZERO,
        totalGas: helpers_1.Long.UZERO
    };
}
exports.TxInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (!message.height.isZero()) {
            writer.uint32(16).int64(message.height);
        }
        if (!message.totalGas.isZero()) {
            writer.uint32(24).uint64(message.totalGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTxInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.height = reader.int64();
                    break;
                case 3:
                    message.totalGas = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? helpers_1.Long.fromValue(object.id) : helpers_1.Long.UZERO,
            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
            totalGas: (0, helpers_1.isSet)(object.totalGas) ? helpers_1.Long.fromValue(object.totalGas) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || helpers_1.Long.UZERO).toString());
        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
        message.totalGas !== undefined && (obj.totalGas = (message.totalGas || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTxInfo();
        message.id = object.id !== undefined && object.id !== null ? helpers_1.Long.fromValue(object.id) : helpers_1.Long.UZERO;
        message.height = object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
        message.totalGas = object.totalGas !== undefined && object.totalGas !== null ? helpers_1.Long.fromValue(object.totalGas) : helpers_1.Long.UZERO;
        return message;
    }
};
function createBaseContractOperationInfo() {
    return {
        id: helpers_1.Long.UZERO,
        txId: helpers_1.Long.UZERO,
        contractAddress: "",
        operationType: 0,
        vmGas: helpers_1.Long.UZERO,
        sdkGas: helpers_1.Long.UZERO
    };
}
exports.ContractOperationInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (!message.txId.isZero()) {
            writer.uint32(16).uint64(message.txId);
        }
        if (message.contractAddress !== "") {
            writer.uint32(26).string(message.contractAddress);
        }
        if (message.operationType !== 0) {
            writer.uint32(32).int32(message.operationType);
        }
        if (!message.vmGas.isZero()) {
            writer.uint32(40).uint64(message.vmGas);
        }
        if (!message.sdkGas.isZero()) {
            writer.uint32(48).uint64(message.sdkGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractOperationInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.txId = reader.uint64();
                    break;
                case 3:
                    message.contractAddress = reader.string();
                    break;
                case 4:
                    message.operationType = reader.int32();
                    break;
                case 5:
                    message.vmGas = reader.uint64();
                    break;
                case 6:
                    message.sdkGas = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? helpers_1.Long.fromValue(object.id) : helpers_1.Long.UZERO,
            txId: (0, helpers_1.isSet)(object.txId) ? helpers_1.Long.fromValue(object.txId) : helpers_1.Long.UZERO,
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            operationType: (0, helpers_1.isSet)(object.operationType) ? contractOperationFromJSON(object.operationType) : 0,
            vmGas: (0, helpers_1.isSet)(object.vmGas) ? helpers_1.Long.fromValue(object.vmGas) : helpers_1.Long.UZERO,
            sdkGas: (0, helpers_1.isSet)(object.sdkGas) ? helpers_1.Long.fromValue(object.sdkGas) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || helpers_1.Long.UZERO).toString());
        message.txId !== undefined && (obj.txId = (message.txId || helpers_1.Long.UZERO).toString());
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.operationType !== undefined && (obj.operationType = contractOperationToJSON(message.operationType));
        message.vmGas !== undefined && (obj.vmGas = (message.vmGas || helpers_1.Long.UZERO).toString());
        message.sdkGas !== undefined && (obj.sdkGas = (message.sdkGas || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseContractOperationInfo();
        message.id = object.id !== undefined && object.id !== null ? helpers_1.Long.fromValue(object.id) : helpers_1.Long.UZERO;
        message.txId = object.txId !== undefined && object.txId !== null ? helpers_1.Long.fromValue(object.txId) : helpers_1.Long.UZERO;
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.operationType = (_b = object.operationType) !== null && _b !== void 0 ? _b : 0;
        message.vmGas = object.vmGas !== undefined && object.vmGas !== null ? helpers_1.Long.fromValue(object.vmGas) : helpers_1.Long.UZERO;
        message.sdkGas = object.sdkGas !== undefined && object.sdkGas !== null ? helpers_1.Long.fromValue(object.sdkGas) : helpers_1.Long.UZERO;
        return message;
    }
};
function createBaseBlockTracking() {
    return {
        txs: []
    };
}
exports.BlockTracking = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.txs) {
            exports.TxTracking.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockTracking();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.txs.push(exports.TxTracking.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            txs: Array.isArray(object === null || object === void 0 ? void 0 : object.txs) ? object.txs.map((e) => exports.TxTracking.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.txs) {
            obj.txs = message.txs.map(e => e ? exports.TxTracking.toJSON(e) : undefined);
        }
        else {
            obj.txs = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockTracking();
        message.txs = ((_a = object.txs) === null || _a === void 0 ? void 0 : _a.map(e => exports.TxTracking.fromPartial(e))) || [];
        return message;
    }
};
function createBaseTxTracking() {
    return {
        info: undefined,
        contractOperations: []
    };
}
exports.TxTracking = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.info !== undefined) {
            exports.TxInfo.encode(message.info, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.contractOperations) {
            exports.ContractOperationInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTxTracking();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.info = exports.TxInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.contractOperations.push(exports.ContractOperationInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            info: (0, helpers_1.isSet)(object.info) ? exports.TxInfo.fromJSON(object.info) : undefined,
            contractOperations: Array.isArray(object === null || object === void 0 ? void 0 : object.contractOperations) ? object.contractOperations.map((e) => exports.ContractOperationInfo.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.info !== undefined && (obj.info = message.info ? exports.TxInfo.toJSON(message.info) : undefined);
        if (message.contractOperations) {
            obj.contractOperations = message.contractOperations.map(e => e ? exports.ContractOperationInfo.toJSON(e) : undefined);
        }
        else {
            obj.contractOperations = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTxTracking();
        message.info = object.info !== undefined && object.info !== null ? exports.TxInfo.fromPartial(object.info) : undefined;
        message.contractOperations = ((_a = object.contractOperations) === null || _a === void 0 ? void 0 : _a.map(e => exports.ContractOperationInfo.fromPartial(e))) || [];
        return message;
    }
};
//# sourceMappingURL=tracking.js.map