"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractFlatFeeSetEvent = exports.MinConsensusFeeSetEvent = exports.RewardsWithdrawEvent = exports.ContractRewardCalculationEvent = exports.ContractMetadataSetEvent = void 0;
/* eslint-disable */
const rewards_1 = require("./rewards");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const helpers_1 = require("../../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
function createBaseContractMetadataSetEvent() {
    return {
        contractAddress: "",
        metadata: undefined
    };
}
exports.ContractMetadataSetEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.metadata !== undefined) {
            rewards_1.ContractMetadata.encode(message.metadata, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractMetadataSetEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.metadata = rewards_1.ContractMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            metadata: (0, helpers_1.isSet)(object.metadata) ? rewards_1.ContractMetadata.fromJSON(object.metadata) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.metadata !== undefined && (obj.metadata = message.metadata ? rewards_1.ContractMetadata.toJSON(message.metadata) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseContractMetadataSetEvent();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.metadata = object.metadata !== undefined && object.metadata !== null ? rewards_1.ContractMetadata.fromPartial(object.metadata) : undefined;
        return message;
    }
};
function createBaseContractRewardCalculationEvent() {
    return {
        contractAddress: "",
        gasConsumed: helpers_1.Long.UZERO,
        inflationRewards: undefined,
        feeRebateRewards: [],
        metadata: undefined
    };
}
exports.ContractRewardCalculationEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (!message.gasConsumed.isZero()) {
            writer.uint32(16).uint64(message.gasConsumed);
        }
        if (message.inflationRewards !== undefined) {
            coin_1.Coin.encode(message.inflationRewards, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.feeRebateRewards) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.metadata !== undefined) {
            rewards_1.ContractMetadata.encode(message.metadata, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractRewardCalculationEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.gasConsumed = reader.uint64();
                    break;
                case 3:
                    message.inflationRewards = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.feeRebateRewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.metadata = rewards_1.ContractMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            gasConsumed: (0, helpers_1.isSet)(object.gasConsumed) ? helpers_1.Long.fromValue(object.gasConsumed) : helpers_1.Long.UZERO,
            inflationRewards: (0, helpers_1.isSet)(object.inflationRewards) ? coin_1.Coin.fromJSON(object.inflationRewards) : undefined,
            feeRebateRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.feeRebateRewards) ? object.feeRebateRewards.map((e) => coin_1.Coin.fromJSON(e)) : [],
            metadata: (0, helpers_1.isSet)(object.metadata) ? rewards_1.ContractMetadata.fromJSON(object.metadata) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.gasConsumed !== undefined && (obj.gasConsumed = (message.gasConsumed || helpers_1.Long.UZERO).toString());
        message.inflationRewards !== undefined && (obj.inflationRewards = message.inflationRewards ? coin_1.Coin.toJSON(message.inflationRewards) : undefined);
        if (message.feeRebateRewards) {
            obj.feeRebateRewards = message.feeRebateRewards.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.feeRebateRewards = [];
        }
        message.metadata !== undefined && (obj.metadata = message.metadata ? rewards_1.ContractMetadata.toJSON(message.metadata) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseContractRewardCalculationEvent();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.gasConsumed = object.gasConsumed !== undefined && object.gasConsumed !== null ? helpers_1.Long.fromValue(object.gasConsumed) : helpers_1.Long.UZERO;
        message.inflationRewards = object.inflationRewards !== undefined && object.inflationRewards !== null ? coin_1.Coin.fromPartial(object.inflationRewards) : undefined;
        message.feeRebateRewards = ((_b = object.feeRebateRewards) === null || _b === void 0 ? void 0 : _b.map(e => coin_1.Coin.fromPartial(e))) || [];
        message.metadata = object.metadata !== undefined && object.metadata !== null ? rewards_1.ContractMetadata.fromPartial(object.metadata) : undefined;
        return message;
    }
};
function createBaseRewardsWithdrawEvent() {
    return {
        rewardAddress: "",
        rewards: []
    };
}
exports.RewardsWithdrawEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.rewardAddress !== "") {
            writer.uint32(10).string(message.rewardAddress);
        }
        for (const v of message.rewards) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRewardsWithdrawEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardAddress = reader.string();
                    break;
                case 2:
                    message.rewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardAddress: (0, helpers_1.isSet)(object.rewardAddress) ? String(object.rewardAddress) : "",
            rewards: Array.isArray(object === null || object === void 0 ? void 0 : object.rewards) ? object.rewards.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.rewardAddress !== undefined && (obj.rewardAddress = message.rewardAddress);
        if (message.rewards) {
            obj.rewards = message.rewards.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.rewards = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRewardsWithdrawEvent();
        message.rewardAddress = (_a = object.rewardAddress) !== null && _a !== void 0 ? _a : "";
        message.rewards = ((_b = object.rewards) === null || _b === void 0 ? void 0 : _b.map(e => coin_1.Coin.fromPartial(e))) || [];
        return message;
    }
};
function createBaseMinConsensusFeeSetEvent() {
    return {
        fee: undefined
    };
}
exports.MinConsensusFeeSetEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.fee !== undefined) {
            coin_1.DecCoin.encode(message.fee, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMinConsensusFeeSetEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fee = coin_1.DecCoin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            fee: (0, helpers_1.isSet)(object.fee) ? coin_1.DecCoin.fromJSON(object.fee) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.fee !== undefined && (obj.fee = message.fee ? coin_1.DecCoin.toJSON(message.fee) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMinConsensusFeeSetEvent();
        message.fee = object.fee !== undefined && object.fee !== null ? coin_1.DecCoin.fromPartial(object.fee) : undefined;
        return message;
    }
};
function createBaseContractFlatFeeSetEvent() {
    return {
        contractAddress: "",
        flatFee: undefined
    };
}
exports.ContractFlatFeeSetEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.flatFee !== undefined) {
            coin_1.Coin.encode(message.flatFee, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractFlatFeeSetEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.flatFee = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            flatFee: (0, helpers_1.isSet)(object.flatFee) ? coin_1.Coin.fromJSON(object.flatFee) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.flatFee !== undefined && (obj.flatFee = message.flatFee ? coin_1.Coin.toJSON(message.flatFee) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseContractFlatFeeSetEvent();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.flatFee = object.flatFee !== undefined && object.flatFee !== null ? coin_1.Coin.fromPartial(object.flatFee) : undefined;
        return message;
    }
};
//# sourceMappingURL=events.js.map