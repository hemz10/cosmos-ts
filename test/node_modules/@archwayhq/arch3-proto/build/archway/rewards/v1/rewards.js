"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlatFee = exports.RewardsRecord = exports.TxRewards = exports.BlockRewards = exports.ContractMetadata = exports.Params = void 0;
/* eslint-disable */
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const timestamp_1 = require("../../../google/protobuf/timestamp");
const helpers_1 = require("../../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
function createBaseParams() {
    return {
        inflationRewardsRatio: "",
        txFeeRebateRatio: "",
        maxWithdrawRecords: helpers_1.Long.UZERO,
        minPriceOfGas: undefined
    };
}
exports.Params = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.inflationRewardsRatio !== "") {
            writer.uint32(10).string(message.inflationRewardsRatio);
        }
        if (message.txFeeRebateRatio !== "") {
            writer.uint32(18).string(message.txFeeRebateRatio);
        }
        if (!message.maxWithdrawRecords.isZero()) {
            writer.uint32(24).uint64(message.maxWithdrawRecords);
        }
        if (message.minPriceOfGas !== undefined) {
            coin_1.DecCoin.encode(message.minPriceOfGas, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.inflationRewardsRatio = reader.string();
                    break;
                case 2:
                    message.txFeeRebateRatio = reader.string();
                    break;
                case 3:
                    message.maxWithdrawRecords = reader.uint64();
                    break;
                case 4:
                    message.minPriceOfGas = coin_1.DecCoin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            inflationRewardsRatio: (0, helpers_1.isSet)(object.inflationRewardsRatio) ? String(object.inflationRewardsRatio) : "",
            txFeeRebateRatio: (0, helpers_1.isSet)(object.txFeeRebateRatio) ? String(object.txFeeRebateRatio) : "",
            maxWithdrawRecords: (0, helpers_1.isSet)(object.maxWithdrawRecords) ? helpers_1.Long.fromValue(object.maxWithdrawRecords) : helpers_1.Long.UZERO,
            minPriceOfGas: (0, helpers_1.isSet)(object.minPriceOfGas) ? coin_1.DecCoin.fromJSON(object.minPriceOfGas) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.inflationRewardsRatio !== undefined && (obj.inflationRewardsRatio = message.inflationRewardsRatio);
        message.txFeeRebateRatio !== undefined && (obj.txFeeRebateRatio = message.txFeeRebateRatio);
        message.maxWithdrawRecords !== undefined && (obj.maxWithdrawRecords = (message.maxWithdrawRecords || helpers_1.Long.UZERO).toString());
        message.minPriceOfGas !== undefined && (obj.minPriceOfGas = message.minPriceOfGas ? coin_1.DecCoin.toJSON(message.minPriceOfGas) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseParams();
        message.inflationRewardsRatio = (_a = object.inflationRewardsRatio) !== null && _a !== void 0 ? _a : "";
        message.txFeeRebateRatio = (_b = object.txFeeRebateRatio) !== null && _b !== void 0 ? _b : "";
        message.maxWithdrawRecords = object.maxWithdrawRecords !== undefined && object.maxWithdrawRecords !== null ? helpers_1.Long.fromValue(object.maxWithdrawRecords) : helpers_1.Long.UZERO;
        message.minPriceOfGas = object.minPriceOfGas !== undefined && object.minPriceOfGas !== null ? coin_1.DecCoin.fromPartial(object.minPriceOfGas) : undefined;
        return message;
    }
};
function createBaseContractMetadata() {
    return {
        contractAddress: "",
        ownerAddress: "",
        rewardsAddress: ""
    };
}
exports.ContractMetadata = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.ownerAddress !== "") {
            writer.uint32(18).string(message.ownerAddress);
        }
        if (message.rewardsAddress !== "") {
            writer.uint32(26).string(message.rewardsAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.ownerAddress = reader.string();
                    break;
                case 3:
                    message.rewardsAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            ownerAddress: (0, helpers_1.isSet)(object.ownerAddress) ? String(object.ownerAddress) : "",
            rewardsAddress: (0, helpers_1.isSet)(object.rewardsAddress) ? String(object.rewardsAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.ownerAddress !== undefined && (obj.ownerAddress = message.ownerAddress);
        message.rewardsAddress !== undefined && (obj.rewardsAddress = message.rewardsAddress);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseContractMetadata();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.ownerAddress = (_b = object.ownerAddress) !== null && _b !== void 0 ? _b : "";
        message.rewardsAddress = (_c = object.rewardsAddress) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseBlockRewards() {
    return {
        height: helpers_1.Long.ZERO,
        inflationRewards: undefined,
        maxGas: helpers_1.Long.UZERO
    };
}
exports.BlockRewards = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.height.isZero()) {
            writer.uint32(8).int64(message.height);
        }
        if (message.inflationRewards !== undefined) {
            coin_1.Coin.encode(message.inflationRewards, writer.uint32(18).fork()).ldelim();
        }
        if (!message.maxGas.isZero()) {
            writer.uint32(24).uint64(message.maxGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockRewards();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.height = reader.int64();
                    break;
                case 2:
                    message.inflationRewards = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.maxGas = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
            inflationRewards: (0, helpers_1.isSet)(object.inflationRewards) ? coin_1.Coin.fromJSON(object.inflationRewards) : undefined,
            maxGas: (0, helpers_1.isSet)(object.maxGas) ? helpers_1.Long.fromValue(object.maxGas) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
        message.inflationRewards !== undefined && (obj.inflationRewards = message.inflationRewards ? coin_1.Coin.toJSON(message.inflationRewards) : undefined);
        message.maxGas !== undefined && (obj.maxGas = (message.maxGas || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseBlockRewards();
        message.height = object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
        message.inflationRewards = object.inflationRewards !== undefined && object.inflationRewards !== null ? coin_1.Coin.fromPartial(object.inflationRewards) : undefined;
        message.maxGas = object.maxGas !== undefined && object.maxGas !== null ? helpers_1.Long.fromValue(object.maxGas) : helpers_1.Long.UZERO;
        return message;
    }
};
function createBaseTxRewards() {
    return {
        txId: helpers_1.Long.UZERO,
        height: helpers_1.Long.ZERO,
        feeRewards: []
    };
}
exports.TxRewards = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.txId.isZero()) {
            writer.uint32(8).uint64(message.txId);
        }
        if (!message.height.isZero()) {
            writer.uint32(16).int64(message.height);
        }
        for (const v of message.feeRewards) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTxRewards();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.txId = reader.uint64();
                    break;
                case 2:
                    message.height = reader.int64();
                    break;
                case 3:
                    message.feeRewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            txId: (0, helpers_1.isSet)(object.txId) ? helpers_1.Long.fromValue(object.txId) : helpers_1.Long.UZERO,
            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
            feeRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.feeRewards) ? object.feeRewards.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.txId !== undefined && (obj.txId = (message.txId || helpers_1.Long.UZERO).toString());
        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
        if (message.feeRewards) {
            obj.feeRewards = message.feeRewards.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.feeRewards = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTxRewards();
        message.txId = object.txId !== undefined && object.txId !== null ? helpers_1.Long.fromValue(object.txId) : helpers_1.Long.UZERO;
        message.height = object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
        message.feeRewards = ((_a = object.feeRewards) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromPartial(e))) || [];
        return message;
    }
};
function createBaseRewardsRecord() {
    return {
        id: helpers_1.Long.UZERO,
        rewardsAddress: "",
        rewards: [],
        calculatedHeight: helpers_1.Long.ZERO,
        calculatedTime: undefined
    };
}
exports.RewardsRecord = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.rewardsAddress !== "") {
            writer.uint32(18).string(message.rewardsAddress);
        }
        for (const v of message.rewards) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (!message.calculatedHeight.isZero()) {
            writer.uint32(32).int64(message.calculatedHeight);
        }
        if (message.calculatedTime !== undefined) {
            timestamp_1.Timestamp.encode(message.calculatedTime, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRewardsRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.rewardsAddress = reader.string();
                    break;
                case 3:
                    message.rewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.calculatedHeight = reader.int64();
                    break;
                case 5:
                    message.calculatedTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? helpers_1.Long.fromValue(object.id) : helpers_1.Long.UZERO,
            rewardsAddress: (0, helpers_1.isSet)(object.rewardsAddress) ? String(object.rewardsAddress) : "",
            rewards: Array.isArray(object === null || object === void 0 ? void 0 : object.rewards) ? object.rewards.map((e) => coin_1.Coin.fromJSON(e)) : [],
            calculatedHeight: (0, helpers_1.isSet)(object.calculatedHeight) ? helpers_1.Long.fromValue(object.calculatedHeight) : helpers_1.Long.ZERO,
            calculatedTime: (0, helpers_1.isSet)(object.calculatedTime) ? (0, helpers_1.fromJsonTimestamp)(object.calculatedTime) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || helpers_1.Long.UZERO).toString());
        message.rewardsAddress !== undefined && (obj.rewardsAddress = message.rewardsAddress);
        if (message.rewards) {
            obj.rewards = message.rewards.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.rewards = [];
        }
        message.calculatedHeight !== undefined && (obj.calculatedHeight = (message.calculatedHeight || helpers_1.Long.ZERO).toString());
        message.calculatedTime !== undefined && (obj.calculatedTime = (0, helpers_1.fromTimestamp)(message.calculatedTime).toISOString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRewardsRecord();
        message.id = object.id !== undefined && object.id !== null ? helpers_1.Long.fromValue(object.id) : helpers_1.Long.UZERO;
        message.rewardsAddress = (_a = object.rewardsAddress) !== null && _a !== void 0 ? _a : "";
        message.rewards = ((_b = object.rewards) === null || _b === void 0 ? void 0 : _b.map(e => coin_1.Coin.fromPartial(e))) || [];
        message.calculatedHeight = object.calculatedHeight !== undefined && object.calculatedHeight !== null ? helpers_1.Long.fromValue(object.calculatedHeight) : helpers_1.Long.ZERO;
        message.calculatedTime = object.calculatedTime !== undefined && object.calculatedTime !== null ? timestamp_1.Timestamp.fromPartial(object.calculatedTime) : undefined;
        return message;
    }
};
function createBaseFlatFee() {
    return {
        contractAddress: "",
        flatFee: undefined
    };
}
exports.FlatFee = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.flatFee !== undefined) {
            coin_1.Coin.encode(message.flatFee, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlatFee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.flatFee = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            flatFee: (0, helpers_1.isSet)(object.flatFee) ? coin_1.Coin.fromJSON(object.flatFee) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.flatFee !== undefined && (obj.flatFee = message.flatFee ? coin_1.Coin.toJSON(message.flatFee) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseFlatFee();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.flatFee = object.flatFee !== undefined && object.flatFee !== null ? coin_1.Coin.fromPartial(object.flatFee) : undefined;
        return message;
    }
};
//# sourceMappingURL=rewards.js.map