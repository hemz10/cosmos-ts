import { ContractMetadata } from "./rewards";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin";
import { Long } from "../../../helpers";
import * as _m0 from "protobufjs/minimal";
/**
 * ContractMetadataSetEvent is emitted when the contract metadata is created or
 * updated.
 */
export interface ContractMetadataSetEvent {
    /** contract_address defines the contract address. */
    contractAddress: string;
    /** metadata defines the new contract metadata state. */
    metadata?: ContractMetadata;
}
/**
 * ContractRewardCalculationEvent is emitted when the contract reward is
 * calculated.
 */
export interface ContractRewardCalculationEvent {
    /** contract_address defines the contract address. */
    contractAddress: string;
    /**
     * gas_consumed defines the total gas consumption by all WASM operations
     * within one transaction.
     */
    gasConsumed: Long;
    /** inflation_rewards defines the inflation rewards portions of the rewards. */
    inflationRewards?: Coin;
    /** fee_rebate_rewards defines the fee rebate rewards portions of the rewards. */
    feeRebateRewards: Coin[];
    /** metadata defines the contract metadata (if set). */
    metadata?: ContractMetadata;
}
/**
 * RewardsWithdrawEvent is emitted when credited rewards for a specific
 * rewards_address are distributed. Event could be triggered by a transaction
 * (via CLI for example) or by a contract via WASM bindings.
 */
export interface RewardsWithdrawEvent {
    /** rewards_address defines the rewards address rewards are distributed to. */
    rewardAddress: string;
    /** rewards defines the total rewards being distributed. */
    rewards: Coin[];
}
/** MinConsensusFeeSetEvent is emitted when the minimum consensus fee is updated. */
export interface MinConsensusFeeSetEvent {
    /** fee defines the updated minimum gas unit price. */
    fee?: DecCoin;
}
/** ContractFlatFeeSetEvent is emitted when the contract flat fee is updated */
export interface ContractFlatFeeSetEvent {
    /**
     * contract_address defines the bech32 address of the contract for which the
     * flat fee is set
     */
    contractAddress: string;
    /**
     * flat_fee defines the amount that has been set as the minimum fee for the
     * contract
     */
    flatFee?: Coin;
}
export declare const ContractMetadataSetEvent: {
    encode(message: ContractMetadataSetEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContractMetadataSetEvent;
    fromJSON(object: any): ContractMetadataSetEvent;
    toJSON(message: ContractMetadataSetEvent): unknown;
    fromPartial(object: Partial<ContractMetadataSetEvent>): ContractMetadataSetEvent;
};
export declare const ContractRewardCalculationEvent: {
    encode(message: ContractRewardCalculationEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContractRewardCalculationEvent;
    fromJSON(object: any): ContractRewardCalculationEvent;
    toJSON(message: ContractRewardCalculationEvent): unknown;
    fromPartial(object: Partial<ContractRewardCalculationEvent>): ContractRewardCalculationEvent;
};
export declare const RewardsWithdrawEvent: {
    encode(message: RewardsWithdrawEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RewardsWithdrawEvent;
    fromJSON(object: any): RewardsWithdrawEvent;
    toJSON(message: RewardsWithdrawEvent): unknown;
    fromPartial(object: Partial<RewardsWithdrawEvent>): RewardsWithdrawEvent;
};
export declare const MinConsensusFeeSetEvent: {
    encode(message: MinConsensusFeeSetEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MinConsensusFeeSetEvent;
    fromJSON(object: any): MinConsensusFeeSetEvent;
    toJSON(message: MinConsensusFeeSetEvent): unknown;
    fromPartial(object: Partial<MinConsensusFeeSetEvent>): MinConsensusFeeSetEvent;
};
export declare const ContractFlatFeeSetEvent: {
    encode(message: ContractFlatFeeSetEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContractFlatFeeSetEvent;
    fromJSON(object: any): ContractFlatFeeSetEvent;
    toJSON(message: ContractFlatFeeSetEvent): unknown;
    fromPartial(object: Partial<ContractFlatFeeSetEvent>): ContractFlatFeeSetEvent;
};
