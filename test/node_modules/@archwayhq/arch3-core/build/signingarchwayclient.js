"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SigningArchwayClient = void 0;
const amino_1 = require("@cosmjs/amino");
const cosmwasm_stargate_1 = require("@cosmjs/cosmwasm-stargate");
const modules_1 = require("@cosmjs/cosmwasm-stargate/build/modules");
const proto_signing_1 = require("@cosmjs/proto-signing");
const stargate_1 = require("@cosmjs/stargate");
const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
const lodash_1 = __importDefault(require("lodash"));
const long_1 = __importDefault(require("long"));
const modules_2 = require("./modules");
const queryclient_1 = require("./queryclient");
const defaultGasAdjustment = 1.3;
function buildResult(response) {
    const { height, transactionHash, gasWanted, gasUsed, events, parsedLogs } = response;
    return {
        logs: parsedLogs,
        height,
        transactionHash,
        events,
        gasWanted,
        gasUsed,
    };
}
const flatFeeRequiredTypes = [
    '/cosmwasm.wasm.v1.MsgExecuteContract',
    '/cosmwasm.wasm.v1.MsgMigrateContract',
];
/**
 * Extension to the {@link SigningCosmWasmClient} for transacting with Archway's modules.
 */
class SigningArchwayClient extends cosmwasm_stargate_1.SigningCosmWasmClient {
    constructor(tmClient, signer, options) {
        const { registry = new proto_signing_1.Registry([...stargate_1.defaultRegistryTypes, ...modules_1.wasmTypes, ...modules_2.rewardsTypes]), aminoTypes = new stargate_1.AminoTypes({
            ...(0, stargate_1.createDefaultAminoConverters)(),
            ...(0, cosmwasm_stargate_1.createWasmAminoConverters)(),
            ...(0, modules_2.createRewardsAminoConverters)(),
        }), gasAdjustment = defaultGasAdjustment, } = options;
        super(tmClient, signer, { ...options, registry, aminoTypes });
        this.archwayQueryClient = (0, queryclient_1.createArchwayQueryClient)(tmClient);
        this.gasAdjustment = gasAdjustment;
    }
    /**
     * Creates an instance by connecting to the given Tendermint RPC endpoint.
     *
     * @param endpoint - String URL of the RPC endpoint to connect or an `HttpEndpoint` object.
     * @param signer - The transaction signer configuration.
     * @param options - Options for the signing client.
     * @returns A {@link SigningArchwayClient} connected to the endpoint.
     *
     * @see {@link SigningArchwayClient.createWithSigner} if you need Tendermint 0.37 support.
     */
    static async connectWithSigner(endpoint, signer, options = {}) {
        const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
        return SigningArchwayClient.createWithSigner(tmClient, signer, options);
    }
    /**
     * Creates an instance by connecting to the given Tendermint RPC endpoint using an {@link HttpBatchClient} to batch
     * multiple requests and reduce queries to the server.
     *
     * @param endpoint - String URL of the RPC endpoint to connect or an {@link HttpEndpoint} object.
     * @param signer - The transaction signer configuration.
     * @param options - Options for the signing client.
     * @param batchClientOptions - Optional configuration to control how the {@link HttpBatchClient} will batch requests.
     * @returns A {@link SigningArchwayClient} connected to the endpoint.
     *
     * @remarks This factory method doesn't support WebSocket endpoints.
     *
     * @see {@link SigningArchwayClient.createWithSigner} if you need Tendermint 0.37 support.
     */
    static async connectWithSignerAndBatchClient(endpoint, signer, options, batchClientOptions) {
        const rpcClient = new tendermint_rpc_1.HttpBatchClient(endpoint, batchClientOptions);
        const tmClient = await tendermint_rpc_1.Tendermint34Client.create(rpcClient);
        return SigningArchwayClient.createWithSigner(tmClient, signer, options);
    }
    /**
     * Creates an instance from a manually created Tendermint client.
     *
     * @param tmClient - A Tendermint client for a given endpoint.
     * @param signer - The transaction signer configuration.
     * @param options - Options for the signing client.
     * @returns A {@link SigningArchwayClient} connected to the endpoint.
     */
    /* eslint-disable-next-line @typescript-eslint/require-await */
    static async createWithSigner(tmClient, signer, options = {}) {
        return new SigningArchwayClient(tmClient, signer, options);
    }
    /**
     * Creates a client in offline mode.
     *
     * @remarks
     * This should only be used in niche cases where you know exactly what you're doing,
     * e.g. when building an offline signing application.
     *
     * When you try to use online functionality with such a signer, an
     * exception will be raised.
     *
     * @param signer - the transaction signer configuration.
     * @param options - options for signing and broadcasting transactions.
     * @returns An offline {@link SigningArchwayClient}.
     */
    /* eslint-disable-next-line @typescript-eslint/require-await */
    static async offline(signer, options = {}) {
        return new SigningArchwayClient(undefined, signer, options);
    }
    /**
     * Updates the rewards metadata of a contract.
     *
     * @param senderAddress - Address of the message sender.
     * @param metadata - The rewards metadata.
     * @param fee - Fee to pay for the transaction. Use 'auto' or a number to calculate the fees automatically.
     *              When a number is set, it will be used as a gas adjustment multiplier for the estimated fees.
     * @param memo - Optional memo to add to the transaction.
     * @returns A {@link SetContractMetadataResult} with the contract's metadata.
     * @throws Error if the transaction fails.
     *
     * @see {@link SigningArchwayClient.withdrawContractRewards} for details on how to withdraw rewards.
     * @see Check the [Archway Bindings](https://github.com/archway-network/archway-bindings) repository
     * for more information on how to withdraw rewards from a contract.
     */
    async setContractMetadata(senderAddress, metadata, fee, memo) {
        var _a, _b;
        const message = modules_2.RewardsMsgEncoder.setContractMetadata({
            senderAddress,
            metadata: {
                contractAddress: metadata.contractAddress,
                ownerAddress: (_a = metadata.ownerAddress) !== null && _a !== void 0 ? _a : '',
                rewardsAddress: (_b = metadata.rewardsAddress) !== null && _b !== void 0 ? _b : '',
            }
        });
        const response = await this.assertSignAndBroadcast(senderAddress, [message], fee, memo);
        const metadataAttr = stargate_1.logs.findAttribute(response.parsedLogs, 'archway.rewards.v1.ContractMetadataSetEvent', 'metadata');
        /* eslint-disable @typescript-eslint/naming-convention */
        const contractMetadata = JSON.parse(metadataAttr.value);
        /* eslint-enable */
        return {
            ...buildResult(response),
            metadata: {
                contractAddress: contractMetadata.contract_address,
                ownerAddress: contractMetadata.owner_address,
                rewardsAddress: contractMetadata.rewards_address,
            },
        };
    }
    /**
     * Updates the contract's premium fee. Only the owner of the contract metadata can update the fee.
     *
     * @param senderAddress - Address of the message sender.
     * @param contractAddress - Contract address to set the premium fee.
     * @param flatFee - The contract premium fee. To disable the fee, set its `amount` to `0`.
     * @param fee - Fee to pay for the transaction. Use 'auto' or a number to calculate the fees automatically.
     *              When a number is set, it will be used as a gas adjustment multiplier for the estimated fees.
     * @param memo - Optional memo to add to the transaction.
     * @returns A {@link SetContractPremiumResult} with the contract's premium fee.
     * @throws Error if the transaction fails.
     *
     * @see {@link SigningArchwayClient.withdrawContractRewards} for details on how to withdraw rewards.
     * @see Check the [Archway Bindings](https://github.com/archway-network/archway-bindings) repository
     * for more information on how to withdraw rewards from a contract.
     */
    async setContractPremium(senderAddress, contractAddress, flatFee, fee, memo) {
        const message = modules_2.RewardsMsgEncoder.setFlatFee({
            senderAddress,
            contractAddress,
            flatFeeAmount: flatFee,
        });
        const response = await this.assertSignAndBroadcast(senderAddress, [message], fee, memo);
        const flatFeeAttr = stargate_1.logs.findAttribute(response.parsedLogs, 'archway.rewards.v1.ContractFlatFeeSetEvent', 'flat_fee');
        return {
            ...buildResult(response),
            premium: {
                contractAddress,
                flatFee: JSON.parse(flatFeeAttr.value),
            }
        };
    }
    /**
     * Withdraws rewards for the `senderAddress` up to the given `limit` of records to process.
     * If the limit is set to `0`, it will use the default limit from the protocol.
     * The default limit is a parameter on the rewards module and it can be updated via governance.
     *
     * @remarks
     * This method is useful when the contract has a large number of rewards to withdraw,
     * so they can be processed in batches.
     *
     * @param senderAddress - Address of the message sender and rewards destination.
     * @param limit - Maximum number of rewards to withdraw.
     * @param fee - Fee to pay for the transaction. Use 'auto' or a number to calculate the fees automatically.
     *              When a number is set, it will be used as a gas adjustment multiplier for the estimated fees.
     * @param memo - Optional memo to add to the transaction.
     * @returns A {@link WithdrawContractRewardsResult} with information about the rewards withdrawn.
     * @throws Error if the transaction fails.
     *
     * @see Check the [Archway Bindings](https://github.com/archway-network/archway-bindings) repository
     * for more information on how to withdraw rewards from a contract.
     */
    async withdrawContractRewards(senderAddress, limit, fee, memo) {
        var _a, _b;
        const rewardsAddress = senderAddress;
        const message = modules_2.RewardsMsgEncoder.withdrawRewards({
            rewardsAddress,
            recordsLimit: {
                limit: long_1.default.fromNumber(limit),
            }
        });
        const response = await this.assertSignAndBroadcast(senderAddress, [message], fee, memo);
        const firstLogs = response.parsedLogs.find(() => true);
        const rewardsAttr = (_b = (_a = firstLogs === null || firstLogs === void 0 ? void 0 : firstLogs.events.find(event => event.type === 'archway.rewards.v1.RewardsWithdrawEvent')) === null || _a === void 0 ? void 0 : _a.attributes.find(attr => attr.key === 'rewards')) === null || _b === void 0 ? void 0 : _b.value;
        const rewards = rewardsAttr ? JSON.parse(rewardsAttr) : [];
        return {
            ...buildResult(response),
            rewardsAddress,
            rewards,
        };
    }
    /**
     * Creates a transaction with the given messages, fee and memo. Then signs and broadcasts the transaction.
     *
     * When setting the fee to 'auto' or a number, the fee will be calculated automatically based on the messages,
     * the minimum price of gas (mPoG) and the minimum consensus fee. If the messages include a contract execution
     * or migration, the contract premium fee will be added to the transaction fee.
     *
     * @param signerAddress - The address that will sign transactions using this instance.
     *                        The signer must be able to sign with this address.
     * @param messages - The messages to include in the transaction. The messages types should be registered in the
     *                  {@link SigningArchwayClient.registry} when the client is instantiated.
     * @param fee - Fee to pay for the transaction. Use 'auto' or a number to calculate the fees automatically.
     *              When a number is set, it will be used as a gas adjustment multiplier for the estimated fees.
     * @param memo - Optional memo to add to the transaction.
     * @returns A {@link DeliverTxResponse} after successfully broadcasting the transaction.
     *
     * @see {@link SigningArchwayClient.calculateFee} for calculating the fees before broadcasting.
     */
    async signAndBroadcast(signerAddress, messages, fee, memo) {
        let usedFee;
        if (fee === 'auto' || typeof fee === 'number') {
            const gasAdjustment = typeof fee === 'number' ? fee : this.gasAdjustment;
            usedFee = await this.calculateFee(signerAddress, messages, memo, gasAdjustment);
        }
        else {
            usedFee = fee;
        }
        return super.signAndBroadcast(signerAddress, messages, usedFee, memo);
    }
    /**
     * Calculates tx fees by simulating the execution of a transaction with the given messages.
     * The fee will be calculated based on the  minimum price of gas (mPoG) and the minimum consensus
     * fee of the network. If the messages include a contract execution or migration, the contract
     * premium fee will be added to the calculation.
     *
     * @param signerAddress - Address used in the gas simulation that will sign transactions.
     *                        The signer must be able to sign with this address.
     * @param messages - The messages to include in the transaction for simulating the gas wanted.
     *                   The messages types should be registered in the {@link SigningArchwayClient.registry}
     *                   when the client is instantiated.
     * @param memo - Optional memo to add to the transaction.
     * @param gasAdjustment - Adjustment factor to be multiplied against the gas estimate.
     * @param granter - The granter address that is used for paying with feegrants.
     * @param payer - The fee payer address. The payer must have signed the transaction.
     * @returns A {@link StdFee} with the estimated fee for the transaction.
     *
     * @see {@link SigningCosmWasmClient.simulate} for simulating the execution of a transaction.
     * @see {@link SigningArchwayClient.getEstimateTxFees} for getting the minimum price of gas (mPoG) and the minimum
     * consensus fee of the network.
     */
    async calculateFee(signerAddress, messages, memo, gasAdjustment = this.gasAdjustment, granter, payer) {
        const gasEstimation = await this.simulate(signerAddress, messages, memo);
        const gas = Math.round(gasEstimation * gasAdjustment);
        const { estimatedFee } = await this.getEstimateTxFees(gas);
        const fee = await this.includeFlatFees(messages, estimatedFee);
        return {
            ...fee,
            granter,
            payer
        };
    }
    async includeFlatFees(messages, fee) {
        // We memoize the contract premium fee to avoid querying the same contract multiple times.
        const _getContractPremium = lodash_1.default.memoize((contractAddress) => this.getContractPremium(contractAddress));
        const flatFees = await Promise.all(messages
            .filter(({ typeUrl }) => flatFeeRequiredTypes.includes(typeUrl))
            .map(async ({ value }) => {
            const contractAddress = lodash_1.default.get(value, 'contract');
            const { flatFee } = await _getContractPremium(contractAddress);
            return flatFee;
        })).then(lodash_1.default.compact); // eslint-disable-line @typescript-eslint/unbound-method
        const amount = [...fee.amount, ...flatFees].reduce(amino_1.addCoins);
        return {
            ...fee,
            amount: [amount]
        };
    }
    async assertSignAndBroadcast(signerAddress, messages, fee, memo) {
        const response = await this.signAndBroadcast(signerAddress, messages, fee, memo);
        (0, stargate_1.assertIsDeliverTxSuccess)(response);
        const parsedLogs = stargate_1.logs.parseRawLog(response.rawLog);
        return {
            ...response,
            parsedLogs,
        };
    }
    /**
     * Withdraws staking rewards.
     *
     * @param delegatorAddress - Address of the delegator withdrawing the staking rewards.
     * @param validatorAddress - Address of the validator in the format `archwayval` + hex encoded public key.
     * @param fee - Fee to pay for the transaction. Use 'auto' to calculate the fee automatically.
     * @param memo - Optional memo to add to the transaction.
     * @returns A {@link DeliverTxResponse} with information about the the withdraw tx.
     */
    /* istanbul ignore next */
    async withdrawRewards(delegatorAddress, validatorAddress, fee, memo) {
        return await super.withdrawRewards(delegatorAddress, validatorAddress, fee, memo);
    }
    /* istanbul ignore next */
    async getBlockRewardsTracking() {
        return await this.archwayQueryClient.getBlockRewardsTracking();
    }
    /* istanbul ignore next */
    async getContractMetadata(contractAddress) {
        return await this.archwayQueryClient.getContractMetadata(contractAddress);
    }
    /* istanbul ignore next */
    async getContractPremium(contractAddress) {
        return await this.archwayQueryClient.getContractPremium(contractAddress);
    }
    /* istanbul ignore next */
    async getEstimateTxFees(gasLimit, contractAddress) {
        return await this.archwayQueryClient.getEstimateTxFees(gasLimit, contractAddress);
    }
    /* istanbul ignore next */
    async getOutstandingRewards(rewardsAddress) {
        return await this.archwayQueryClient.getOutstandingRewards(rewardsAddress);
    }
    /* istanbul ignore next */
    async getRewardsPool() {
        return await this.archwayQueryClient.getRewardsPool();
    }
    /* istanbul ignore next */
    async getAllRewardsRecords(rewardsAddress) {
        return await this.archwayQueryClient.getAllRewardsRecords(rewardsAddress);
    }
}
exports.SigningArchwayClient = SigningArchwayClient;
//# sourceMappingURL=signingarchwayclient.js.map